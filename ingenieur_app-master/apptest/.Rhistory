shiny::runApp()
# User interface
source("packages.R")
# load relevant rds
foldername = "C:/Serge/lucurgent/apptest/"
filename = "bigds.rds"
pathfile = paste0(foldername,filename)
bigds = readRDS(file = pathfile)
filename = "france_region_polygone.rds"
pathfile = paste0(foldername,filename)
france_region_polygone = readRDS(file = pathfile)
# Calcul des barycentres des shapes
centroids_df = as.data.frame(centroid(france_region_polygone))
names(centroids_df) = c("long","lat")
france_region_polygone@data = cbind(france_region_polygone@data,centroids_df)
# basemap
basemap = leaflet(france_region_polygone) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
color = "white",
weight = 2,
smoothFactor = 0.5,
opacity = 0.2,
fillOpacity =0,layerId = ~OBJECTID,
highlightOptions = highlightOptions(color = "red",
weight = 2,
bringToFront = TRUE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(bigds)
View(bigds)
popup_data = bigds[bigds$OBJECTID==10 & bigds$annee==1805,
c("NAME_1","f_a","f_b","f_c")]
View(popup_data)
paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
popup_data
t(popup_data)
t(popup_data)[,2]
t(popup_data)[2]
(t(popup_data))[2]
f = t(popup_data)
f
class(f)
f[,2]
dim(f)
f[1]
f[,1]
f = popup_data[1,]
f
f[2]
row.names(f)
f = popup_data[1,]
f
col.names(f)
colnames(f)
f
class(f)
f = unlist(popup_data[1,])
class(f)
f
t(popup_data[1,])
f = unlist(t(popup_data[1,]))
f
class(f)
f = as.vector(t(popup_data[1,]))
f
colnames(f)
colnames(popup_data)
paste(f1,f2)
f1 = as.vector(t(popup_data[1,]))
f2 = colnames(popup_data)
paste(f1,f2)
f2 = as.vector(t(popup_data[1,]))
f1 = colnames(popup_data)
paste(f1,f2)
paste(f1,f2,sep = ":")
paste(paste(f1,f2,sep = ":"),collapse = "<br>")
paste(paste("<br>",f1,f2,sep = ":"),collapse = "<br>")
paste(paste(f1,f2,sep = ":"),collapse = "<br/>")
paste("<br/>",paste(f1,f2,sep = ":"),collapse = "<br/>")
paste("<br/>",paste0(f1,f2,sep = ":"),collapse = "<br/>")
paste(paste0(f1,f2,sep = ":"),collapse = "<br/>")
c("<br/>",paste(paste0(f1,f2,sep = ":"),collapse = "<br/>"))
paste0("<br/>",paste(paste0(f1,f2,sep = ":"),collapse = "<br/>"))
paste0(f1,f2,sep = ":")
paste0("<br/>",paste(paste(f1,f2,sep = ":"),collapse = "<br/>"))
df_to_html = function(popup_data){
f2 = as.vector(t(popup_data[1,]))
f1 = colnames(popup_data)
res = paste0("<br/>",paste(paste(f1,f2,sep = ":"),collapse = "<br/>"))
return (res)
}
# la fonction
df_to_html = function(popup_data){
f2 = as.vector(t(popup_data[1,]))
f1 = colnames(popup_data)
res = paste0("<br/>",paste(paste(f1,f2,sep = ":"),collapse = "<br/>"))
return (res)
}
df_to_html(popup_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
previewColors(colorNumeric("Blues", domain = NULL), sort(rexp(16)))
sort(rexp(16)
)
rexp(16)
previewColors(colorBin("Blues", domain = NULL, bins = 4), sort(rexp(16)))
previewColors(colorBin("Blues", domain = NULL, bins = 3), sort(rexp(16)))
previewColors(colorBin("Blues", domain = NULL, bins = 10), sort(rexp(16)))
previewColors(colorBin("Blues", domain = NULL, bins = 5), sort(rexp(16)))
previewColors(colorQuantile("Blues", domain = NULL), sort(rexp(16)))
# Categorical data; by default, the values being colored span the gamut...
previewColors(colorFactor("RdYlBu", domain = NULL), LETTERS[1:5])
# ...unless the data is a factor, without droplevels...
previewColors(colorFactor("RdYlBu", domain = NULL), factor(LETTERS[1:5], levels = LETTERS))
# ...unless the data is a factor, without droplevels...
previewColors(colorFactor("RdYlBu", domain = NULL), factor(LETTERS[1:5], levels = LETTERS))
# ...or the domain is stated explicitly.
previewColors(colorFactor("RdYlBu", levels = LETTERS), LETTERS[1:5])
palette()
?palette()
?colorRampPalette
rbPal <- colorRampPalette(c('white','red'))
rbPal(10)
runApp()
runApp()
runApp()
